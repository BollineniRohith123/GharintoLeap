// Code generated by the Encore 1.50.0 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly analytics: analytics.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly common: common.ServiceClient
    public readonly communications: communications.ServiceClient
    public readonly files: files.ServiceClient
    public readonly leads: leads.ServiceClient
    public readonly materials: materials.ServiceClient
    public readonly menu: menu.ServiceClient
    public readonly payments: payments.ServiceClient
    public readonly projects: projects.ServiceClient
    public readonly system: system.ServiceClient
    public readonly users: users.ServiceClient
    public readonly vendors: vendors.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.analytics = new analytics.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.common = new common.ServiceClient(base)
        this.communications = new communications.ServiceClient(base)
        this.files = new files.ServiceClient(base)
        this.leads = new leads.ServiceClient(base)
        this.materials = new materials.ServiceClient(base)
        this.menu = new menu.ServiceClient(base)
        this.payments = new payments.ServiceClient(base)
        this.projects = new projects.ServiceClient(base)
        this.system = new system.ServiceClient(base)
        this.users = new users.ServiceClient(base)
        this.vendors = new vendors.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * Import the auth handler to be able to derive the auth type
 */
import type { auth as auth_auth } from "~backend/auth/auth";

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: RequestType<typeof auth_auth> | AuthDataGenerator
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getDashboard as api_analytics_dashboard_getDashboard } from "~backend/analytics/dashboard";
import {
    getCustomerDashboard as api_analytics_dashboard_widgets_getCustomerDashboard,
    getDesignerDashboard as api_analytics_dashboard_widgets_getDesignerDashboard,
    getProjectManagerDashboard as api_analytics_dashboard_widgets_getProjectManagerDashboard,
    getSuperAdminDashboard as api_analytics_dashboard_widgets_getSuperAdminDashboard,
    getVendorDashboard as api_analytics_dashboard_widgets_getVendorDashboard
} from "~backend/analytics/dashboard_widgets";

export namespace analytics {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getCustomerDashboard = this.getCustomerDashboard.bind(this)
            this.getDashboard = this.getDashboard.bind(this)
            this.getDesignerDashboard = this.getDesignerDashboard.bind(this)
            this.getProjectManagerDashboard = this.getProjectManagerDashboard.bind(this)
            this.getSuperAdminDashboard = this.getSuperAdminDashboard.bind(this)
            this.getVendorDashboard = this.getVendorDashboard.bind(this)
        }

        public async getCustomerDashboard(): Promise<ResponseType<typeof api_analytics_dashboard_widgets_getCustomerDashboard>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/dashboard/customer`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_dashboard_widgets_getCustomerDashboard>
        }

        /**
         * Gets dashboard analytics and metrics
         */
        public async getDashboard(params: RequestType<typeof api_analytics_dashboard_getDashboard>): Promise<ResponseType<typeof api_analytics_dashboard_getDashboard>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                city:     params.city,
                dateFrom: params.dateFrom,
                dateTo:   params.dateTo,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/dashboard`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_dashboard_getDashboard>
        }

        public async getDesignerDashboard(): Promise<ResponseType<typeof api_analytics_dashboard_widgets_getDesignerDashboard>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/dashboard/designer`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_dashboard_widgets_getDesignerDashboard>
        }

        public async getProjectManagerDashboard(): Promise<ResponseType<typeof api_analytics_dashboard_widgets_getProjectManagerDashboard>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/dashboard/project-manager`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_dashboard_widgets_getProjectManagerDashboard>
        }

        public async getSuperAdminDashboard(): Promise<ResponseType<typeof api_analytics_dashboard_widgets_getSuperAdminDashboard>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/dashboard/super-admin`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_dashboard_widgets_getSuperAdminDashboard>
        }

        public async getVendorDashboard(): Promise<ResponseType<typeof api_analytics_dashboard_widgets_getVendorDashboard>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/dashboard/vendor`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_dashboard_widgets_getVendorDashboard>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { login as api_auth_login_login } from "~backend/auth/login";
import { register as api_auth_register_register } from "~backend/auth/register";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.login = this.login.bind(this)
            this.register = this.register.bind(this)
        }

        /**
         * Authenticates a user and returns a JWT token
         */
        public async login(params: RequestType<typeof api_auth_login_login>): Promise<ResponseType<typeof api_auth_login_login>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/login`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_login_login>
        }

        /**
         * Registers a new user account
         */
        public async register(params: RequestType<typeof api_auth_register_register>): Promise<ResponseType<typeof api_auth_register_register>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/register`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_register_register>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createAuditLog as api_common_audit_service_createAuditLog,
    getAuditLogs as api_common_audit_service_getAuditLogs,
    getEntityAuditTrail as api_common_audit_service_getEntityAuditTrail,
    getUserAuditHistory as api_common_audit_service_getUserAuditHistory
} from "~backend/common/audit_service";
import {
    getFilterOptions as api_common_search_service_getFilterOptions,
    globalSearch as api_common_search_service_globalSearch
} from "~backend/common/search_service";

export namespace common {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createAuditLog = this.createAuditLog.bind(this)
            this.getAuditLogs = this.getAuditLogs.bind(this)
            this.getEntityAuditTrail = this.getEntityAuditTrail.bind(this)
            this.getFilterOptions = this.getFilterOptions.bind(this)
            this.getUserAuditHistory = this.getUserAuditHistory.bind(this)
            this.globalSearch = this.globalSearch.bind(this)
        }

        public async createAuditLog(params: RequestType<typeof api_common_audit_service_createAuditLog>): Promise<void> {
            await this.baseClient.callTypedAPI(`/audit/log`, {method: "POST", body: JSON.stringify(params)})
        }

        public async getAuditLogs(params: RequestType<typeof api_common_audit_service_getAuditLogs>): Promise<ResponseType<typeof api_common_audit_service_getAuditLogs>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/audit/search`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_common_audit_service_getAuditLogs>
        }

        public async getEntityAuditTrail(params: { entity_type: string, entity_id: number }): Promise<ResponseType<typeof api_common_audit_service_getEntityAuditTrail>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/audit/entity/${encodeURIComponent(params.entity_type)}/${encodeURIComponent(params.entity_id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_common_audit_service_getEntityAuditTrail>
        }

        public async getFilterOptions(params: { entity_type: string }): Promise<ResponseType<typeof api_common_search_service_getFilterOptions>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/search/filters/${encodeURIComponent(params.entity_type)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_common_search_service_getFilterOptions>
        }

        public async getUserAuditHistory(params: RequestType<typeof api_common_audit_service_getUserAuditHistory>): Promise<ResponseType<typeof api_common_audit_service_getUserAuditHistory>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:     params.limit === undefined ? undefined : String(params.limit),
                offset:    params.offset === undefined ? undefined : String(params.offset),
                "user_id": params["user_id"] === undefined ? undefined : String(params["user_id"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/audit/user`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_common_audit_service_getUserAuditHistory>
        }

        public async globalSearch(params: RequestType<typeof api_common_search_service_globalSearch>): Promise<ResponseType<typeof api_common_search_service_globalSearch>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/search`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_common_search_service_globalSearch>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createConversation as api_communications_messages_createConversation,
    getConversationMessages as api_communications_messages_getConversationMessages,
    getConversations as api_communications_messages_getConversations,
    markMessagesAsRead as api_communications_messages_markMessagesAsRead,
    sendMessage as api_communications_messages_sendMessage
} from "~backend/communications/messages";
import {
    createNotification as api_communications_notification_service_createNotification,
    getNotificationTemplates as api_communications_notification_service_getNotificationTemplates,
    getUserNotifications as api_communications_notification_service_getUserNotifications,
    markNotificationsAsRead as api_communications_notification_service_markNotificationsAsRead,
    sendTemplatedNotification as api_communications_notification_service_sendTemplatedNotification
} from "~backend/communications/notification_service";
import { getNotifications as api_communications_notifications_getNotifications } from "~backend/communications/notifications";

export namespace communications {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createConversation = this.createConversation.bind(this)
            this.createNotification = this.createNotification.bind(this)
            this.getConversationMessages = this.getConversationMessages.bind(this)
            this.getConversations = this.getConversations.bind(this)
            this.getNotificationTemplates = this.getNotificationTemplates.bind(this)
            this.getNotifications = this.getNotifications.bind(this)
            this.getUserNotifications = this.getUserNotifications.bind(this)
            this.markMessagesAsRead = this.markMessagesAsRead.bind(this)
            this.markNotificationsAsRead = this.markNotificationsAsRead.bind(this)
            this.sendMessage = this.sendMessage.bind(this)
            this.sendTemplatedNotification = this.sendTemplatedNotification.bind(this)
        }

        public async createConversation(params: RequestType<typeof api_communications_messages_createConversation>): Promise<ResponseType<typeof api_communications_messages_createConversation>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/conversations`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_messages_createConversation>
        }

        public async createNotification(params: RequestType<typeof api_communications_notification_service_createNotification>): Promise<void> {
            await this.baseClient.callTypedAPI(`/notifications`, {method: "POST", body: JSON.stringify(params)})
        }

        public async getConversationMessages(params: { conversation_id: number }): Promise<ResponseType<typeof api_communications_messages_getConversationMessages>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/conversations/${encodeURIComponent(params.conversation_id)}/messages`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_messages_getConversationMessages>
        }

        public async getConversations(): Promise<ResponseType<typeof api_communications_messages_getConversations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/conversations`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_messages_getConversations>
        }

        public async getNotificationTemplates(): Promise<ResponseType<typeof api_communications_notification_service_getNotificationTemplates>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notification-templates`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_notification_service_getNotificationTemplates>
        }

        /**
         * Gets user notifications with pagination
         */
        public async getNotifications(params: RequestType<typeof api_communications_notifications_getNotifications>): Promise<ResponseType<typeof api_communications_notifications_getNotifications>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:      params.limit === undefined ? undefined : String(params.limit),
                page:       params.page === undefined ? undefined : String(params.page),
                unreadOnly: params.unreadOnly === undefined ? undefined : String(params.unreadOnly),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/communications/notifications`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_notifications_getNotifications>
        }

        public async getUserNotifications(params: RequestType<typeof api_communications_notification_service_getUserNotifications>): Promise<ResponseType<typeof api_communications_notification_service_getUserNotifications>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:         params.limit === undefined ? undefined : String(params.limit),
                offset:        params.offset === undefined ? undefined : String(params.offset),
                "unread_only": params["unread_only"] === undefined ? undefined : String(params["unread_only"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_notification_service_getUserNotifications>
        }

        public async markMessagesAsRead(params: RequestType<typeof api_communications_messages_markMessagesAsRead>): Promise<void> {
            await this.baseClient.callTypedAPI(`/messages/mark-read`, {method: "POST", body: JSON.stringify(params)})
        }

        public async markNotificationsAsRead(params: RequestType<typeof api_communications_notification_service_markNotificationsAsRead>): Promise<void> {
            await this.baseClient.callTypedAPI(`/notifications/mark-read`, {method: "POST", body: JSON.stringify(params)})
        }

        public async sendMessage(params: RequestType<typeof api_communications_messages_sendMessage>): Promise<ResponseType<typeof api_communications_messages_sendMessage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/messages`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_communications_messages_sendMessage>
        }

        public async sendTemplatedNotification(params: RequestType<typeof api_communications_notification_service_sendTemplatedNotification>): Promise<void> {
            await this.baseClient.callTypedAPI(`/notifications/templated`, {method: "POST", body: JSON.stringify(params)})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    deleteFile as api_files_file_service_deleteFile,
    getFile as api_files_file_service_getFile,
    getFilesByEntity as api_files_file_service_getFilesByEntity,
    getUserFiles as api_files_file_service_getUserFiles,
    uploadFile as api_files_file_service_uploadFile
} from "~backend/files/file_service";

export namespace files {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.deleteFile = this.deleteFile.bind(this)
            this.getFile = this.getFile.bind(this)
            this.getFilesByEntity = this.getFilesByEntity.bind(this)
            this.getUserFiles = this.getUserFiles.bind(this)
            this.uploadFile = this.uploadFile.bind(this)
        }

        public async deleteFile(params: { file_id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/files/${encodeURIComponent(params.file_id)}`, {method: "DELETE", body: undefined})
        }

        public async getFile(params: { file_id: string }): Promise<ResponseType<typeof api_files_file_service_getFile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/files/${encodeURIComponent(params.file_id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_files_file_service_getFile>
        }

        public async getFilesByEntity(params: { entity_type: string, entity_id: number }): Promise<ResponseType<typeof api_files_file_service_getFilesByEntity>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/files/entity/${encodeURIComponent(params.entity_type)}/${encodeURIComponent(params.entity_id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_files_file_service_getFilesByEntity>
        }

        public async getUserFiles(params: RequestType<typeof api_files_file_service_getUserFiles>): Promise<ResponseType<typeof api_files_file_service_getUserFiles>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "entity_type": params["entity_type"],
                limit:         params.limit === undefined ? undefined : String(params.limit),
                offset:        params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/files`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_files_file_service_getUserFiles>
        }

        public async uploadFile(params: RequestType<typeof api_files_file_service_uploadFile>): Promise<ResponseType<typeof api_files_file_service_uploadFile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/files/upload`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_files_file_service_uploadFile>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createLead as api_leads_create_createLead } from "~backend/leads/create";
import { listLeads as api_leads_list_listLeads } from "~backend/leads/list";

export namespace leads {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createLead = this.createLead.bind(this)
            this.listLeads = this.listLeads.bind(this)
        }

        /**
         * Creates a new lead with automatic scoring
         */
        public async createLead(params: RequestType<typeof api_leads_create_createLead>): Promise<ResponseType<typeof api_leads_create_createLead>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/leads`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_leads_create_createLead>
        }

        /**
         * Lists leads with filtering and pagination
         */
        public async listLeads(params: RequestType<typeof api_leads_list_listLeads>): Promise<ResponseType<typeof api_leads_list_listLeads>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                assignedTo: params.assignedTo === undefined ? undefined : String(params.assignedTo),
                city:       params.city,
                limit:      params.limit === undefined ? undefined : String(params.limit),
                minScore:   params.minScore === undefined ? undefined : String(params.minScore),
                page:       params.page === undefined ? undefined : String(params.page),
                status:     params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/leads`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_leads_list_listLeads>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createMaterial as api_materials_material_service_createMaterial,
    getCategories as api_materials_material_service_getCategories,
    listMaterials as api_materials_material_service_listMaterials
} from "~backend/materials/material_service";

export namespace materials {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createMaterial = this.createMaterial.bind(this)
            this.getCategories = this.getCategories.bind(this)
            this.getMaterialStats = this.getMaterialStats.bind(this)
            this.listMaterials = this.listMaterials.bind(this)
        }

        /**
         * Create material (vendor only)
         */
        public async createMaterial(params: RequestType<typeof api_materials_material_service_createMaterial>): Promise<ResponseType<typeof api_materials_material_service_createMaterial>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/materials`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_materials_material_service_createMaterial>
        }

        /**
         * Get categories
         */
        public async getCategories(): Promise<ResponseType<typeof api_materials_material_service_getCategories>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/materials/categories`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_materials_material_service_getCategories>
        }

        /**
         * Get material statistics
         */
        public async getMaterialStats(): Promise<void> {
            await this.baseClient.callTypedAPI(`/materials/stats`, {method: "GET", body: undefined})
        }

        /**
         * List materials
         */
        public async listMaterials(): Promise<ResponseType<typeof api_materials_material_service_listMaterials>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/materials`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_materials_material_service_listMaterials>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getUserMenus as api_menu_menu_service_getUserMenus } from "~backend/menu/menu_service";

export namespace menu {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getUserMenus = this.getUserMenus.bind(this)
        }

        /**
         * Get user's accessible menus based on their roles
         */
        public async getUserMenus(): Promise<ResponseType<typeof api_menu_menu_service_getUserMenus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/menus/user`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_menu_menu_service_getUserMenus>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createPayment as api_payments_payment_service_createPayment,
    createWalletTransaction as api_payments_payment_service_createWalletTransaction,
    getFinancialSummary as api_payments_payment_service_getFinancialSummary,
    getProjectPayments as api_payments_payment_service_getProjectPayments,
    getUserWallet as api_payments_payment_service_getUserWallet,
    getWalletTransactions as api_payments_payment_service_getWalletTransactions,
    processPayment as api_payments_payment_service_processPayment
} from "~backend/payments/payment_service";
import { getWallet as api_payments_wallet_getWallet } from "~backend/payments/wallet";

export namespace payments {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createPayment = this.createPayment.bind(this)
            this.createWalletTransaction = this.createWalletTransaction.bind(this)
            this.getFinancialSummary = this.getFinancialSummary.bind(this)
            this.getProjectPayments = this.getProjectPayments.bind(this)
            this.getUserWallet = this.getUserWallet.bind(this)
            this.getWallet = this.getWallet.bind(this)
            this.getWalletTransactions = this.getWalletTransactions.bind(this)
            this.processPayment = this.processPayment.bind(this)
        }

        public async createPayment(params: RequestType<typeof api_payments_payment_service_createPayment>): Promise<ResponseType<typeof api_payments_payment_service_createPayment>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/payments`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payments_payment_service_createPayment>
        }

        public async createWalletTransaction(params: RequestType<typeof api_payments_payment_service_createWalletTransaction>): Promise<ResponseType<typeof api_payments_payment_service_createWalletTransaction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wallet/transactions`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payments_payment_service_createWalletTransaction>
        }

        public async getFinancialSummary(params: RequestType<typeof api_payments_payment_service_getFinancialSummary>): Promise<ResponseType<typeof api_payments_payment_service_getFinancialSummary>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "end_date":   params["end_date"] === undefined ? undefined : params["end_date"].toISOString(),
                "start_date": params["start_date"] === undefined ? undefined : params["start_date"].toISOString(),
                "user_id":    params["user_id"] === undefined ? undefined : String(params["user_id"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/finance/summary`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payments_payment_service_getFinancialSummary>
        }

        public async getProjectPayments(params: RequestType<typeof api_payments_payment_service_getProjectPayments>): Promise<ResponseType<typeof api_payments_payment_service_getProjectPayments>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.project_id)}/payments`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payments_payment_service_getProjectPayments>
        }

        public async getUserWallet(params: RequestType<typeof api_payments_payment_service_getUserWallet>): Promise<ResponseType<typeof api_payments_payment_service_getUserWallet>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "user_id": params["user_id"] === undefined ? undefined : String(params["user_id"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wallet`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payments_payment_service_getUserWallet>
        }

        /**
         * Gets the user's wallet information and recent transactions
         */
        public async getWallet(): Promise<ResponseType<typeof api_payments_wallet_getWallet>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/payments/wallet`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payments_wallet_getWallet>
        }

        public async getWalletTransactions(params: RequestType<typeof api_payments_payment_service_getWalletTransactions>): Promise<ResponseType<typeof api_payments_payment_service_getWalletTransactions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:     params.limit === undefined ? undefined : String(params.limit),
                offset:    params.offset === undefined ? undefined : String(params.offset),
                type:      params.type,
                "user_id": params["user_id"] === undefined ? undefined : String(params["user_id"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wallet/transactions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payments_payment_service_getWalletTransactions>
        }

        public async processPayment(params: RequestType<typeof api_payments_payment_service_processPayment>): Promise<ResponseType<typeof api_payments_payment_service_processPayment>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/payments/process`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_payments_payment_service_processPayment>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createProject as api_projects_create_createProject } from "~backend/projects/create";
import { listProjects as api_projects_list_listProjects } from "~backend/projects/list";
import {
    createProjectWorkflows as api_projects_workflow_service_createProjectWorkflows,
    getProjectWorkflows as api_projects_workflow_service_getProjectWorkflows,
    getWorkflowTemplate as api_projects_workflow_service_getWorkflowTemplate,
    updateWorkflow as api_projects_workflow_service_updateWorkflow
} from "~backend/projects/workflow_service";

export namespace projects {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createProject = this.createProject.bind(this)
            this.createProjectWorkflows = this.createProjectWorkflows.bind(this)
            this.getProjectWorkflows = this.getProjectWorkflows.bind(this)
            this.getWorkflowTemplate = this.getWorkflowTemplate.bind(this)
            this.listProjects = this.listProjects.bind(this)
            this.updateWorkflow = this.updateWorkflow.bind(this)
        }

        /**
         * Creates a new project
         */
        public async createProject(params: RequestType<typeof api_projects_create_createProject>): Promise<ResponseType<typeof api_projects_create_createProject>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_create_createProject>
        }

        public async createProjectWorkflows(params: { project_id: number }): Promise<ResponseType<typeof api_projects_workflow_service_createProjectWorkflows>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.project_id)}/workflows`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_workflow_service_createProjectWorkflows>
        }

        public async getProjectWorkflows(params: { project_id: number }): Promise<ResponseType<typeof api_projects_workflow_service_getProjectWorkflows>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.project_id)}/workflows`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_workflow_service_getProjectWorkflows>
        }

        public async getWorkflowTemplate(): Promise<ResponseType<typeof api_projects_workflow_service_getWorkflowTemplate>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/workflows/template`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_workflow_service_getWorkflowTemplate>
        }

        /**
         * Lists projects with filtering and pagination
         */
        public async listProjects(params: RequestType<typeof api_projects_list_listProjects>): Promise<ResponseType<typeof api_projects_list_listProjects>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                city:       params.city,
                clientId:   params.clientId === undefined ? undefined : String(params.clientId),
                designerId: params.designerId === undefined ? undefined : String(params.designerId),
                limit:      params.limit === undefined ? undefined : String(params.limit),
                page:       params.page === undefined ? undefined : String(params.page),
                status:     params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_list_listProjects>
        }

        public async updateWorkflow(params: RequestType<typeof api_projects_workflow_service_updateWorkflow>): Promise<ResponseType<typeof api_projects_workflow_service_updateWorkflow>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/workflows/update`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_projects_workflow_service_updateWorkflow>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    assignUserRoles as api_system_rbac_assignUserRoles,
    checkPermission as api_system_rbac_checkPermission,
    getAllPermissions as api_system_rbac_getAllPermissions,
    getAllRoles as api_system_rbac_getAllRoles,
    getRolePermissions as api_system_rbac_getRolePermissions,
    getUserMenus as api_system_rbac_getUserMenus,
    getUserPermissions as api_system_rbac_getUserPermissions,
    getUserRoles as api_system_rbac_getUserRoles,
    updateRolePermissions as api_system_rbac_updateRolePermissions
} from "~backend/system/rbac";
import { getRoles as api_system_roles_getRoles } from "~backend/system/roles";

export namespace system {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.assignUserRoles = this.assignUserRoles.bind(this)
            this.checkPermission = this.checkPermission.bind(this)
            this.getAllPermissions = this.getAllPermissions.bind(this)
            this.getAllRoles = this.getAllRoles.bind(this)
            this.getRolePermissions = this.getRolePermissions.bind(this)
            this.getRoles = this.getRoles.bind(this)
            this.getUserMenus = this.getUserMenus.bind(this)
            this.getUserPermissions = this.getUserPermissions.bind(this)
            this.getUserRoles = this.getUserRoles.bind(this)
            this.updateRolePermissions = this.updateRolePermissions.bind(this)
        }

        public async assignUserRoles(params: RequestType<typeof api_system_rbac_assignUserRoles>): Promise<void> {
            await this.baseClient.callTypedAPI(`/rbac/assign-roles`, {method: "POST", body: JSON.stringify(params)})
        }

        public async checkPermission(params: RequestType<typeof api_system_rbac_checkPermission>): Promise<ResponseType<typeof api_system_rbac_checkPermission>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rbac/check-permission`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_rbac_checkPermission>
        }

        public async getAllPermissions(): Promise<ResponseType<typeof api_system_rbac_getAllPermissions>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rbac/permissions`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_rbac_getAllPermissions>
        }

        public async getAllRoles(): Promise<ResponseType<typeof api_system_rbac_getAllRoles>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rbac/roles`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_rbac_getAllRoles>
        }

        public async getRolePermissions(params: { role_id: number }): Promise<ResponseType<typeof api_system_rbac_getRolePermissions>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rbac/roles/${encodeURIComponent(params.role_id)}/permissions`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_rbac_getRolePermissions>
        }

        /**
         * Gets all system roles with their permissions
         */
        public async getRoles(): Promise<ResponseType<typeof api_system_roles_getRoles>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/roles`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_roles_getRoles>
        }

        public async getUserMenus(): Promise<ResponseType<typeof api_system_rbac_getUserMenus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rbac/user-menus`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_rbac_getUserMenus>
        }

        public async getUserPermissions(params: RequestType<typeof api_system_rbac_getUserPermissions>): Promise<ResponseType<typeof api_system_rbac_getUserPermissions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "user_id": params["user_id"] === undefined ? undefined : String(params["user_id"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rbac/user-permissions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_rbac_getUserPermissions>
        }

        public async getUserRoles(params: RequestType<typeof api_system_rbac_getUserRoles>): Promise<ResponseType<typeof api_system_rbac_getUserRoles>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "user_id": params["user_id"] === undefined ? undefined : String(params["user_id"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rbac/user-roles`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_rbac_getUserRoles>
        }

        public async updateRolePermissions(params: RequestType<typeof api_system_rbac_updateRolePermissions>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "permission_ids": params["permission_ids"],
            }

            await this.baseClient.callTypedAPI(`/rbac/roles/${encodeURIComponent(params.role_id)}/permissions`, {method: "PUT", body: JSON.stringify(body)})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { listUsers as api_users_list_listUsers } from "~backend/users/list";
import { getProfile as api_users_profile_getProfile } from "~backend/users/profile";

export namespace users {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getProfile = this.getProfile.bind(this)
            this.listUsers = this.listUsers.bind(this)
        }

        /**
         * Gets the current user's profile and menu access
         */
        public async getProfile(): Promise<ResponseType<typeof api_users_profile_getProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/users/profile`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_users_profile_getProfile>
        }

        /**
         * Lists all users with filtering and pagination
         */
        public async listUsers(params: RequestType<typeof api_users_list_listUsers>): Promise<ResponseType<typeof api_users_list_listUsers>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                city:   params.city,
                limit:  params.limit === undefined ? undefined : String(params.limit),
                page:   params.page === undefined ? undefined : String(params.page),
                role:   params.role,
                search: params.search,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/users`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_users_list_listUsers>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createMaterial as api_vendors_vendor_service_createMaterial,
    createVendor as api_vendors_vendor_service_createVendor,
    createVendorReview as api_vendors_vendor_service_createVendorReview,
    getMaterial as api_vendors_vendor_service_getMaterial,
    getVendorReviews as api_vendors_vendor_service_getVendorReviews,
    getVendors as api_vendors_vendor_service_getVendors,
    searchMaterials as api_vendors_vendor_service_searchMaterials,
    updateMaterial as api_vendors_vendor_service_updateMaterial
} from "~backend/vendors/vendor_service";

export namespace vendors {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createMaterial = this.createMaterial.bind(this)
            this.createVendor = this.createVendor.bind(this)
            this.createVendorReview = this.createVendorReview.bind(this)
            this.getMaterial = this.getMaterial.bind(this)
            this.getVendorReviews = this.getVendorReviews.bind(this)
            this.getVendors = this.getVendors.bind(this)
            this.searchMaterials = this.searchMaterials.bind(this)
            this.updateMaterial = this.updateMaterial.bind(this)
        }

        public async createMaterial(params: RequestType<typeof api_vendors_vendor_service_createMaterial>): Promise<ResponseType<typeof api_vendors_vendor_service_createMaterial>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/materials`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vendors_vendor_service_createMaterial>
        }

        public async createVendor(params: RequestType<typeof api_vendors_vendor_service_createVendor>): Promise<ResponseType<typeof api_vendors_vendor_service_createVendor>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vendors`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vendors_vendor_service_createVendor>
        }

        public async createVendorReview(params: RequestType<typeof api_vendors_vendor_service_createVendorReview>): Promise<ResponseType<typeof api_vendors_vendor_service_createVendorReview>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vendors/reviews`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vendors_vendor_service_createVendorReview>
        }

        public async getMaterial(params: { material_id: number }): Promise<ResponseType<typeof api_vendors_vendor_service_getMaterial>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/materials/${encodeURIComponent(params.material_id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vendors_vendor_service_getMaterial>
        }

        public async getVendorReviews(params: RequestType<typeof api_vendors_vendor_service_getVendorReviews>): Promise<ResponseType<typeof api_vendors_vendor_service_getVendorReviews>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vendors/${encodeURIComponent(params.vendor_id)}/reviews`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vendors_vendor_service_getVendorReviews>
        }

        public async getVendors(params: RequestType<typeof api_vendors_vendor_service_getVendors>): Promise<ResponseType<typeof api_vendors_vendor_service_getVendors>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "business_type": params["business_type"],
                city:            params.city,
                limit:           params.limit === undefined ? undefined : String(params.limit),
                "min_rating":    params["min_rating"] === undefined ? undefined : String(params["min_rating"]),
                offset:          params.offset === undefined ? undefined : String(params.offset),
                "verified_only": params["verified_only"] === undefined ? undefined : String(params["verified_only"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vendors`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vendors_vendor_service_getVendors>
        }

        public async searchMaterials(params: RequestType<typeof api_vendors_vendor_service_searchMaterials>): Promise<ResponseType<typeof api_vendors_vendor_service_searchMaterials>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/materials/search`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vendors_vendor_service_searchMaterials>
        }

        public async updateMaterial(params: RequestType<typeof api_vendors_vendor_service_updateMaterial>): Promise<ResponseType<typeof api_vendors_vendor_service_updateMaterial>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                brand:                params.brand,
                category:             params.category,
                description:          params.description,
                "discounted_price":   params["discounted_price"],
                images:               params.images,
                "lead_time_days":     params["lead_time_days"],
                "min_order_quantity": params["min_order_quantity"],
                model:                params.model,
                name:                 params.name,
                price:                params.price,
                specifications:       params.specifications,
                "stock_quantity":     params["stock_quantity"],
                subcategory:          params.subcategory,
                unit:                 params.unit,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/materials/${encodeURIComponent(params.material_id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_vendors_vendor_service_updateMaterial>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | RequestType<typeof auth_auth>
  | Promise<RequestType<typeof auth_auth> | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.0)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: RequestType<typeof auth_auth> | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
